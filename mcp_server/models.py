# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:00:42+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class AuthorizationCode(BaseModel):
    code: Optional[str] = Field(
        None,
        description='The Authorization Code in ASCII. It can be used to transfer the domain to or from another registrar.',
    )


class ContactNotice(Enum):
    CONTACT_NOTICE_UNSPECIFIED = 'CONTACT_NOTICE_UNSPECIFIED'
    PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT = 'PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT'


class Privacy(Enum):
    CONTACT_PRIVACY_UNSPECIFIED = 'CONTACT_PRIVACY_UNSPECIFIED'
    PUBLIC_CONTACT_DATA = 'PUBLIC_CONTACT_DATA'
    PRIVATE_CONTACT_DATA = 'PRIVATE_CONTACT_DATA'
    REDACTED_CONTACT_DATA = 'REDACTED_CONTACT_DATA'


class ResourceState(Enum):
    RESOURCE_STATE_UNSPECIFIED = 'RESOURCE_STATE_UNSPECIFIED'
    IMPORTABLE = 'IMPORTABLE'
    UNSUPPORTED = 'UNSUPPORTED'
    SUSPENDED = 'SUSPENDED'
    EXPIRED = 'EXPIRED'
    DELETED = 'DELETED'


class Algorithm(Enum):
    ALGORITHM_UNSPECIFIED = 'ALGORITHM_UNSPECIFIED'
    RSAMD5 = 'RSAMD5'
    DH = 'DH'
    DSA = 'DSA'
    ECC = 'ECC'
    RSASHA1 = 'RSASHA1'
    DSANSEC3SHA1 = 'DSANSEC3SHA1'
    RSASHA1NSEC3SHA1 = 'RSASHA1NSEC3SHA1'
    RSASHA256 = 'RSASHA256'
    RSASHA512 = 'RSASHA512'
    ECCGOST = 'ECCGOST'
    ECDSAP256SHA256 = 'ECDSAP256SHA256'
    ECDSAP384SHA384 = 'ECDSAP384SHA384'
    ED25519 = 'ED25519'
    ED448 = 'ED448'
    INDIRECT = 'INDIRECT'
    PRIVATEDNS = 'PRIVATEDNS'
    PRIVATEOID = 'PRIVATEOID'


class DigestType(Enum):
    DIGEST_TYPE_UNSPECIFIED = 'DIGEST_TYPE_UNSPECIFIED'
    SHA1 = 'SHA1'
    SHA256 = 'SHA256'
    GOST3411 = 'GOST3411'
    SHA384 = 'SHA384'


class DsRecord(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        None, description='The algorithm used to generate the referenced DNSKEY.'
    )
    digest: Optional[str] = Field(
        None, description='The digest generated from the referenced DNSKEY.'
    )
    digestType: Optional[DigestType] = Field(
        None,
        description='The hash function used to generate the digest of the referenced DNSKEY.',
    )
    keyTag: Optional[int] = Field(
        None, description='The key tag of the record. Must be set in range 0 -- 65535.'
    )


class ExportRegistrationRequest(BaseModel):
    pass


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class GlueRecord(BaseModel):
    hostName: Optional[str] = Field(
        None, description='Required. Domain name of the host in Punycode format.'
    )
    ipv4Addresses: Optional[List[str]] = Field(
        None,
        description='List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. `198.51.100.1`). At least one of `ipv4_address` and `ipv6_address` must be set.',
    )
    ipv6Addresses: Optional[List[str]] = Field(
        None,
        description='List of IPv6 addresses corresponding to this host in the standard hexadecimal format (e.g. `2001:db8::`). At least one of `ipv4_address` and `ipv6_address` must be set.',
    )


class DsState(Enum):
    DS_STATE_UNSPECIFIED = 'DS_STATE_UNSPECIFIED'
    DS_RECORDS_UNPUBLISHED = 'DS_RECORDS_UNPUBLISHED'
    DS_RECORDS_PUBLISHED = 'DS_RECORDS_PUBLISHED'


class GoogleDomainsDns(BaseModel):
    dsRecords: Optional[List[DsRecord]] = Field(
        None,
        description='Output only. The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.',
    )
    dsState: Optional[DsState] = Field(
        None,
        description='Required. The state of DS records for this domain. Used to enable or disable automatic DNSSEC.',
    )
    nameServers: Optional[List[str]] = Field(
        None,
        description='Output only. A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.',
    )


class ImportDomainRequest(BaseModel):
    domainName: Optional[str] = Field(
        None,
        description='Required. The domain name. Unicode domain names must be expressed in Punycode format.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of labels associated with the `Registration`.'
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class RenewalMethod(Enum):
    RENEWAL_METHOD_UNSPECIFIED = 'RENEWAL_METHOD_UNSPECIFIED'
    AUTOMATIC_RENEWAL = 'AUTOMATIC_RENEWAL'
    MANUAL_RENEWAL = 'MANUAL_RENEWAL'


class TransferLockState(Enum):
    TRANSFER_LOCK_STATE_UNSPECIFIED = 'TRANSFER_LOCK_STATE_UNSPECIFIED'
    UNLOCKED = 'UNLOCKED'
    LOCKED = 'LOCKED'


class ManagementSettings(BaseModel):
    renewalMethod: Optional[RenewalMethod] = Field(
        None, description='Output only. The renewal method for this `Registration`.'
    )
    transferLockState: Optional[TransferLockState] = Field(
        None,
        description='Controls whether the domain can be transferred to another registrar.',
    )


class Money(BaseModel):
    currencyCode: Optional[str] = Field(
        None, description='The three-letter currency code defined in ISO 4217.'
    )
    nanos: Optional[int] = Field(
        None,
        description='Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.',
    )
    units: Optional[str] = Field(
        None,
        description='The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.',
    )


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='The time the operation finished running.'
    )
    statusDetail: Optional[str] = Field(
        None, description='Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Name of the verb executed by the operation.'
    )


class PostalAddress(BaseModel):
    addressLines: Optional[List[str]] = Field(
        None,
        description='Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).',
    )
    administrativeArea: Optional[str] = Field(
        None,
        description='Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don\'t use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address\' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".',
    )
    locality: Optional[str] = Field(
        None,
        description='Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.',
    )
    organization: Optional[str] = Field(
        None, description='Optional. The name of the organization at the address.'
    )
    postalCode: Optional[str] = Field(
        None,
        description='Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).',
    )
    recipients: Optional[List[str]] = Field(
        None,
        description='Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.',
    )
    regionCode: Optional[str] = Field(
        None,
        description='Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.',
    )
    revision: Optional[int] = Field(
        None,
        description='The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.',
    )
    sortingCode: Optional[str] = Field(
        None,
        description='Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d\'Ivoire).',
    )
    sublocality: Optional[str] = Field(
        None,
        description='Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.',
    )


class DomainNotice(Enum):
    DOMAIN_NOTICE_UNSPECIFIED = 'DOMAIN_NOTICE_UNSPECIFIED'
    HSTS_PRELOADED = 'HSTS_PRELOADED'


class Availability(Enum):
    AVAILABILITY_UNSPECIFIED = 'AVAILABILITY_UNSPECIFIED'
    AVAILABLE = 'AVAILABLE'
    UNAVAILABLE = 'UNAVAILABLE'
    UNSUPPORTED = 'UNSUPPORTED'
    UNKNOWN = 'UNKNOWN'


class SupportedPrivacyEnum(Enum):
    CONTACT_PRIVACY_UNSPECIFIED = 'CONTACT_PRIVACY_UNSPECIFIED'
    PUBLIC_CONTACT_DATA = 'PUBLIC_CONTACT_DATA'
    PRIVATE_CONTACT_DATA = 'PRIVATE_CONTACT_DATA'
    REDACTED_CONTACT_DATA = 'REDACTED_CONTACT_DATA'


class RegisterParameters(BaseModel):
    availability: Optional[Availability] = Field(
        None,
        description='Indicates whether the domain is available for registration. This value is accurate when obtained by calling `RetrieveRegisterParameters`, but is approximate when obtained by calling `SearchDomains`.',
    )
    domainName: Optional[str] = Field(
        None,
        description='The domain name. Unicode domain names are expressed in Punycode format.',
    )
    domainNotices: Optional[List[DomainNotice]] = Field(
        None, description='Notices about special properties of the domain.'
    )
    supportedPrivacy: Optional[List[SupportedPrivacyEnum]] = Field(
        None, description='Contact privacy options that the domain supports.'
    )
    yearlyPrice: Optional[Money] = Field(
        None, description='Price to register or renew the domain for one year.'
    )


class Issue(Enum):
    ISSUE_UNSPECIFIED = 'ISSUE_UNSPECIFIED'
    CONTACT_SUPPORT = 'CONTACT_SUPPORT'
    UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL'


class RegisterFailureReason(Enum):
    REGISTER_FAILURE_REASON_UNSPECIFIED = 'REGISTER_FAILURE_REASON_UNSPECIFIED'
    REGISTER_FAILURE_REASON_UNKNOWN = 'REGISTER_FAILURE_REASON_UNKNOWN'
    DOMAIN_NOT_AVAILABLE = 'DOMAIN_NOT_AVAILABLE'
    INVALID_CONTACTS = 'INVALID_CONTACTS'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    REGISTRATION_PENDING = 'REGISTRATION_PENDING'
    REGISTRATION_FAILED = 'REGISTRATION_FAILED'
    TRANSFER_PENDING = 'TRANSFER_PENDING'
    TRANSFER_FAILED = 'TRANSFER_FAILED'
    IMPORT_PENDING = 'IMPORT_PENDING'
    ACTIVE = 'ACTIVE'
    SUSPENDED = 'SUSPENDED'
    EXPORTED = 'EXPORTED'


class TransferFailureReason(Enum):
    TRANSFER_FAILURE_REASON_UNSPECIFIED = 'TRANSFER_FAILURE_REASON_UNSPECIFIED'
    TRANSFER_FAILURE_REASON_UNKNOWN = 'TRANSFER_FAILURE_REASON_UNKNOWN'
    EMAIL_CONFIRMATION_FAILURE = 'EMAIL_CONFIRMATION_FAILURE'
    DOMAIN_NOT_REGISTERED = 'DOMAIN_NOT_REGISTERED'
    DOMAIN_HAS_TRANSFER_LOCK = 'DOMAIN_HAS_TRANSFER_LOCK'
    INVALID_AUTHORIZATION_CODE = 'INVALID_AUTHORIZATION_CODE'
    TRANSFER_CANCELLED = 'TRANSFER_CANCELLED'
    TRANSFER_REJECTED = 'TRANSFER_REJECTED'
    INVALID_REGISTRANT_EMAIL_ADDRESS = 'INVALID_REGISTRANT_EMAIL_ADDRESS'
    DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER = 'DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER'
    TRANSFER_ALREADY_PENDING = 'TRANSFER_ALREADY_PENDING'


class ResetAuthorizationCodeRequest(BaseModel):
    pass


class RetrieveRegisterParametersResponse(BaseModel):
    registerParameters: Optional[RegisterParameters] = Field(
        None, description='Parameters to use when calling the `RegisterDomain` method.'
    )


class SearchDomainsResponse(BaseModel):
    registerParameters: Optional[List[RegisterParameters]] = Field(
        None, description='Results of the domain name search.'
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class TransferParameters(BaseModel):
    currentRegistrar: Optional[str] = Field(
        None, description='The registrar that currently manages the domain.'
    )
    currentRegistrarUri: Optional[str] = Field(
        None, description='The URL of the registrar that currently manages the domain.'
    )
    domainName: Optional[str] = Field(
        None,
        description='The domain name. Unicode domain names are expressed in Punycode format.',
    )
    nameServers: Optional[List[str]] = Field(
        None,
        description='The name servers that currently store the configuration of the domain.',
    )
    supportedPrivacy: Optional[List[SupportedPrivacyEnum]] = Field(
        None, description='Contact privacy options that the domain supports.'
    )
    transferLockState: Optional[TransferLockState] = Field(
        None,
        description='Indicates whether the domain is protected by a transfer lock. For a transfer to succeed, this must show `UNLOCKED`. To unlock a domain, go to its current registrar.',
    )
    yearlyPrice: Optional[Money] = Field(
        None, description='Price to transfer or renew the domain for one year.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class ConfigureManagementSettingsRequest(BaseModel):
    managementSettings: Optional[ManagementSettings] = Field(
        None, description='Fields of the `ManagementSettings` to update.'
    )
    updateMask: Optional[str] = Field(
        None,
        description='Required. The field mask describing which fields to update as a comma-separated list. For example, if only the transfer lock is being updated, the `update_mask` is `"transfer_lock_state"`.',
    )


class Contact(BaseModel):
    email: Optional[str] = Field(
        None, description='Required. Email address of the contact.'
    )
    faxNumber: Optional[str] = Field(
        None,
        description='Fax number of the contact in international format. For example, `"+1-800-555-0123"`.',
    )
    phoneNumber: Optional[str] = Field(
        None,
        description='Required. Phone number of the contact in international format. For example, `"+1-800-555-0123"`.',
    )
    postalAddress: Optional[PostalAddress] = Field(
        None, description='Required. Postal address of the contact.'
    )


class ContactSettings(BaseModel):
    adminContact: Optional[Contact] = Field(
        None, description='Required. The administrative contact for the `Registration`.'
    )
    privacy: Optional[Privacy] = Field(
        None,
        description='Required. Privacy setting for the contacts associated with the `Registration`.',
    )
    registrantContact: Optional[Contact] = Field(
        None,
        description='Required. The registrant contact for the `Registration`. *Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.* *Warning: For new `Registration`s, the registrant receives an email confirmation that they must complete within 15 days to avoid domain suspension.*',
    )
    technicalContact: Optional[Contact] = Field(
        None, description='Required. The technical contact for the `Registration`.'
    )


class CustomDns(BaseModel):
    dsRecords: Optional[List[DsRecord]] = Field(
        None,
        description="The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.",
    )
    nameServers: Optional[List[str]] = Field(
        None,
        description='Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.',
    )


class DnsSettings(BaseModel):
    customDns: Optional[CustomDns] = Field(
        None, description='An arbitrary DNS provider identified by its name servers.'
    )
    glueRecords: Optional[List[GlueRecord]] = Field(
        None,
        description='The list of glue records for this `Registration`. Commonly empty.',
    )
    googleDomainsDns: Optional[GoogleDomainsDns] = Field(
        None,
        description='The free DNS zone provided by [Google Domains](https://domains.google/).',
    )


class Domain(BaseModel):
    domainName: Optional[str] = Field(
        None,
        description='The domain name. Unicode domain names are expressed in Punycode format.',
    )
    resourceState: Optional[ResourceState] = Field(
        None, description='The state of this domain as a `Registration` resource.'
    )
    yearlyPrice: Optional[Money] = Field(
        None,
        description='Price to renew the domain for one year. Only set when `resource_state` is `IMPORTABLE`.',
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class Registration(BaseModel):
    contactSettings: Optional[ContactSettings] = Field(
        None,
        description='Required. Settings for contact information linked to the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureContactSettings` method.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The creation timestamp of the `Registration` resource.',
    )
    dnsSettings: Optional[DnsSettings] = Field(
        None,
        description='Settings controlling the DNS configuration of the `Registration`. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings` method.',
    )
    domainName: Optional[str] = Field(
        None,
        description='Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.',
    )
    expireTime: Optional[str] = Field(
        None, description='Output only. The expiration timestamp of the `Registration`.'
    )
    issues: Optional[List[Issue]] = Field(
        None,
        description='Output only. The set of issues with the `Registration` that require attention.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Set of labels associated with the `Registration`.'
    )
    managementSettings: Optional[ManagementSettings] = Field(
        None,
        description='Settings for management of the `Registration`, including renewal, billing, and transfer. You cannot update these with the `UpdateRegistration` method. To update these settings, use the `ConfigureManagementSettings` method.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Name of the `Registration` resource, in the format `projects/*/locations/*/registrations/`.',
    )
    pendingContactSettings: Optional[ContactSettings] = Field(
        None,
        description='Output only. Pending contact settings for the `Registration`. Updates to the `contact_settings` field that change its `registrant_contact` or `privacy` fields require email confirmation by the `registrant_contact` before taking effect. This field is set only if there are pending updates to the `contact_settings` that have not been confirmed. To confirm the changes, the `registrant_contact` must follow the instructions in the email they receive.',
    )
    registerFailureReason: Optional[RegisterFailureReason] = Field(
        None,
        description='Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.',
    )
    state: Optional[State] = Field(
        None, description='Output only. The state of the `Registration`'
    )
    supportedPrivacy: Optional[List[SupportedPrivacyEnum]] = Field(
        None,
        description='Output only. Set of options for the `contact_settings.privacy` field that this `Registration` supports.',
    )
    transferFailureReason: Optional[TransferFailureReason] = Field(
        None,
        description='Output only. The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state.',
    )


class RetrieveImportableDomainsResponse(BaseModel):
    domains: Optional[List[Domain]] = Field(
        None,
        description='A list of domains that the calling user manages in Google Domains.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='When present, there are more results to retrieve. Set `page_token` to this value on a subsequent call to get the next page of results.',
    )


class RetrieveTransferParametersResponse(BaseModel):
    transferParameters: Optional[TransferParameters] = Field(
        None, description='Parameters to use when calling the `TransferDomain` method.'
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class TransferDomainRequest(BaseModel):
    authorizationCode: Optional[AuthorizationCode] = Field(
        None,
        description="The domain's transfer authorization code. You can obtain this from the domain's current registrar.",
    )
    contactNotices: Optional[List[ContactNotice]] = Field(
        None,
        description='The list of contact notices that you acknowledge. The notices needed here depend on the values specified in `registration.contact_settings`.',
    )
    registration: Optional[Registration] = Field(
        None,
        description="Required. The complete `Registration` resource to be created. You can leave `registration.dns_settings` unset to import the domain's current DNS configuration from its current registrar. Use this option only if you are sure that the domain's current DNS service does not cease upon transfer, as is often the case for DNS services provided for free by the registrar.",
    )
    validateOnly: Optional[bool] = Field(
        None,
        description='Validate the request without actually transferring the domain.',
    )
    yearlyPrice: Optional[Money] = Field(
        None,
        description='Required. Acknowledgement of the price to transfer or renew the domain for one year. Call `RetrieveTransferParameters` to obtain the price, which you must acknowledge.',
    )


class ConfigureContactSettingsRequest(BaseModel):
    contactNotices: Optional[List[ContactNotice]] = Field(
        None,
        description='The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `contact_settings`.',
    )
    contactSettings: Optional[ContactSettings] = Field(
        None, description='Fields of the `ContactSettings` to update.'
    )
    updateMask: Optional[str] = Field(
        None,
        description='Required. The field mask describing which fields to update as a comma-separated list. For example, if only the registrant contact is being updated, the `update_mask` is `"registrant_contact"`.',
    )
    validateOnly: Optional[bool] = Field(
        None,
        description='Validate the request without actually updating the contact settings.',
    )


class ConfigureDnsSettingsRequest(BaseModel):
    dnsSettings: Optional[DnsSettings] = Field(
        None, description='Fields of the `DnsSettings` to update.'
    )
    updateMask: Optional[str] = Field(
        None,
        description='Required. The field mask describing which fields to update as a comma-separated list. For example, if only the name servers are being updated for an existing Custom DNS configuration, the `update_mask` is `"custom_dns.name_servers"`. When changing the DNS provider from one type to another, pass the new provider\'s field name as part of the field mask. For example, when changing from a Google Domains DNS configuration to a Custom DNS configuration, the `update_mask` is `"custom_dns"`. //',
    )
    validateOnly: Optional[bool] = Field(
        None,
        description='Validate the request without actually updating the DNS settings.',
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class ListRegistrationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='When present, there are more results to retrieve. Set `page_token` to this value on a subsequent call to get the next page of results.',
    )
    registrations: Optional[List[Registration]] = Field(
        None, description='A list of `Registration`s.'
    )


class RegisterDomainRequest(BaseModel):
    contactNotices: Optional[List[ContactNotice]] = Field(
        None,
        description='The list of contact notices that the caller acknowledges. The notices needed here depend on the values specified in `registration.contact_settings`.',
    )
    domainNotices: Optional[List[DomainNotice]] = Field(
        None,
        description='The list of domain notices that you acknowledge. Call `RetrieveRegisterParameters` to see the notices that need acknowledgement.',
    )
    registration: Optional[Registration] = Field(
        None,
        description='Required. The complete `Registration` resource to be created.',
    )
    validateOnly: Optional[bool] = Field(
        None,
        description='When true, only validation is performed, without actually registering the domain. Follows: https://cloud.google.com/apis/design/design_patterns#request_validation',
    )
    yearlyPrice: Optional[Money] = Field(
        None,
        description='Required. Yearly price to register or renew the domain. The value that should be put here can be obtained from RetrieveRegisterParameters or SearchDomains calls.',
    )
